{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/Header/Header.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","components/Header/Header.module.css","App.module.css","components/Chart/Chart.module.css","assets/covid.png","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","BASE_URL","fetchData","a","axios","get","fetchDailyData","modifiedData","map","total","date","reportDate","fetchCountriesData","countries","country","name","getCountryData","Chart","useState","dailyData","setDailyData","useEffect","getDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Header","src","imageHeader","image","alt","CountryPicker","handleChange","countriesName","setCountry","FormControl","NativeSelect","defaultValue","onChange","event","target","index","key","App","handleCountryChange","countryData","setState","state","getData","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3983567e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__El-CZ\",\"card\":\"Cards_card__e1U5q\",\"confirmed\":\"Cards_confirmed__3OFXq\",\"recovered\":\"Cards_recovered__2beRb\",\"deaths\":\"Cards_deaths__5cHpn\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport  CountUp from 'react-countup';\r\nimport cx from 'classname';\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ( { data: { confirmed, recovered, deaths, lastUpdate } } ) => {\r\n   \r\n    if(!confirmed) {\r\n        return <h1>LOADING ...</h1>;\r\n    }\r\n    return(\r\n        <div className={ styles.container }>\r\n          <Grid container spacing={ 3 } justify=\"center\">\r\n           <Grid item component={ Card } xs={ 12 } md={ 3 } className={ cx(styles.card, styles.confirmed) }>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp \r\n                 start={ 0 }\r\n                 end={ confirmed.value }\r\n                 duration={ 2.5 }\r\n                 separator=\".\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\r\n              <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n            </CardContent>\r\n           </Grid>\r\n           <Grid item component={ Card } xs={ 12 } md={ 3 } className={ cx(styles.card, styles.recovered) }>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp \r\n                 start={ 0 }\r\n                 end={ recovered.value }\r\n                 duration={ 2.5 }\r\n                 separator=\".\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\r\n              <Typography variant=\"body2\">Number of recovered cases of COVID-19</Typography>\r\n            </CardContent>\r\n           </Grid>\r\n           <Grid item component={ Card } xs={ 12 } md={ 3 } className={ cx(styles.card, styles.deaths) }>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                 start={ 0 }\r\n                 end={ deaths.value }\r\n                 duration={ 2.5 }\r\n                 separator=\".\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\r\n              <Typography variant=\"body2\">Number of deaths cases of COVID-19</Typography>\r\n            </CardContent>\r\n           </Grid>\r\n          </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst BASE_URL = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async() => {\r\n    \r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(BASE_URL);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate, }\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const { data } = await axios.get(`${ BASE_URL }/daily`);\r\n\r\n        const modifiedData = data.map(data => {\r\n            return { \r\n                     confirmed: data.confirmed.total,\r\n                     deaths: data.deaths.total, \r\n                     date: data.reportDate \r\n                    }\r\n        });\r\n        return modifiedData;\r\n       \r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountriesData = async() => {\r\n\r\n    try {\r\n        const { data: { countries } }  = await axios.get(`${ BASE_URL }/countries`);\r\n\r\n        return countries.map(country => country.name);\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const getCountryData = async (country) => {\r\n   try {\r\n       const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(`${ BASE_URL }/countries/${ country }`);\r\n\r\n       return { confirmed, recovered, deaths, lastUpdate };\r\n\r\n   } catch (error) {\r\n       \r\n   }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n   \r\n    const [ dailyData, setDailyData ] = useState([]);\r\n    useEffect(() => {\r\n        const getDailyData = async() => {\r\n           setDailyData(await fetchDailyData());\r\n        }\r\n        getDailyData();\r\n    }, [setDailyData]);\r\n  \r\n    const lineChart = (\r\n        dailyData.length ?\r\n      ( <Line \r\n         data={{\r\n           labels: dailyData.map(({date}) => date),\r\n           datasets: [ {\r\n               data: dailyData.map(({ confirmed }) => confirmed),\r\n               label: \"Infected\",\r\n               borderColor: \"#3333ff\",\r\n               fill: true,\r\n           }, {\r\n               data: dailyData.map(({ deaths }) => deaths),\r\n               label: \"Deaths\",\r\n               borderColor: \"red\",\r\n               backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n           } ]\r\n         }}\r\n        /> )\r\n        : null\r\n    )\r\n\r\n    const barChart = (\r\n        confirmed ?\r\n        (<Bar\r\n          data={{\r\n           labels: [ \"Infected\", \"Recovered\", \"Deaths\" ],\r\n           datasets: [{\r\n               label: \"People\",\r\n               backgroundColor: [\r\n                   \"rgba(0, 0,255, 0.5)\",\r\n                   \"rgba(0, 255,0, 0.5)\",\r\n                   \"rgb(255, 0, 0, 0.5)\"\r\n               ],\r\n               data: [ confirmed.value, recovered.value, deaths.value ]\r\n           }]\r\n          }}\r\n          options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${ country }` }\r\n          }}\r\n        />)\r\n        : null\r\n    )\r\n    return(\r\n        <div className={ styles.container }>\r\n         { country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\nimport styles from './Header.module.css';\r\nimport imageHeader from '../../assets/covid.png';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header className={ styles.container }>\r\n            <img src={ imageHeader } className={ styles.image } alt=\"covid-19\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountriesData } from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({ handleChange }) => {\r\n    const [ countriesName, setCountry ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getCountryData = async () => {\r\n            setCountry( await (fetchCountriesData()) )\r\n        }\r\n        getCountryData();\r\n    }, [ setCountry ]);\r\n\r\n    return(\r\n        countriesName.length ? \r\n       <FormControl className={ styles.container }>\r\n        <NativeSelect defaultValue=\"\" onChange={ event => handleChange(event.target.value) }>\r\n         <option value=\"\">Global</option>\r\n          { countriesName.map((name, index) => <option key={ index } value={ name }>{ name }</option>) }\r\n        </NativeSelect>\r\n       </FormControl>\r\n       : null\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\n\nimport styles from './App.module.css'\n\nimport { Cards, Chart, CountryPicker, Header } from './components';\nimport { fetchData, getCountryData } from './api';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      data: {},\n      country: \"\",\n      countryData: {}\n    }\n  }\n\n  async componentDidMount() {\n    const getData = await fetchData();\n\n    this.setState({ data: getData });\n  }\n\n  handleCountryChange = async(country) => {\n    const countryData = await getCountryData(country);\n  \n    this.setState({ countryData: countryData, country });\n  }\n\n  render() {\n\n    const { data, countryData, country } = this.state;\n\n    return (\n      <div className={ styles.container }>\n       <Header />\n       <Cards data={ country ? countryData : data }/>\n       <CountryPicker handleChange={ this.handleCountryChange }/>\n       <Chart data={ countryData } country={ country }/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__1Io5Y\",\"image\":\"Header_image__20X59\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2Wls6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1xMnY\",\"card\":\"Chart_card__1YYPW\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1LrzP\"};"],"sourceRoot":""}